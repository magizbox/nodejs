{
    "docs": [
        {
            "location": "/", 
            "text": "Node.js Tutorial \nby MG\n\n\n\n\nNode.js is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of tools and applications. Although Node.js is not a JavaScript framework, many of its basic modules are written in JavaScript, and developers can write new modules in JavaScript. The runtime environment interprets JavaScript using Google's V8 JavaScript engine. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in Web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games). Node.js was originally written in 2009 by Ryan Dahl. The initial release supported only Linux. Its development and maintenance was led by Dahl and later sponsored by Joyent.\n\n\n\n\nTable of contents\n\n\nThis site is intended to host a variety of resources and pointers to information about Node.js. \n\n\n Get Started\n\n\nLearn Basic\n\n\n\n\nBasic Syntax: conditional, loop, function\n\n\nData Structure: number\n\n\nData Structure: string\n\n\nData Structure: collection \n\n\nData Structure: datetime\n\n\n\n\nClasses and Inheritance\n\n\n\n\nClasses and Objects\n\n\nConstructors\n\n\nEncapsulation\n\n\nInheritance\n\n\nPolymorphism\n\n\nAbstraction\n\n\n\n\nGo Deeper\n\n\n\n\nFiles \n IO\n\n\nOperating System Programming\n\n\nNetworking Programming\n\n\nConcurrency and Parallelism Programming\n\n\nEvent Based Programming\n\n\nWeb Development\n\n\n\n\nSoftware Development\n\n\n\n\nError Handling\n\n\nLogging\n\n\nConfiguration\n\n\nCommand Line\n\n\nTesting\n\n\nIDE\n\n\nPackage Manager\n\n\nBuild Tool\n\n\nEnvironment\n\n\nModule\n\n\nProduction\n\n\n\n\nMiscellaneous\n\n\n\n\nBooks\n\n\nCourses\n\n\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses", 
            "title": "Home"
        }, 
        {
            "location": "/#nodejs-tutorial-by-mg", 
            "text": "Node.js is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of tools and applications. Although Node.js is not a JavaScript framework, many of its basic modules are written in JavaScript, and developers can write new modules in JavaScript. The runtime environment interprets JavaScript using Google's V8 JavaScript engine. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in Web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games). Node.js was originally written in 2009 by Ryan Dahl. The initial release supported only Linux. Its development and maintenance was led by Dahl and later sponsored by Joyent.", 
            "title": "Node.js Tutorial by MG"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "This site is intended to host a variety of resources and pointers to information about Node.js.    Get Started", 
            "title": "Table of contents"
        }, 
        {
            "location": "/#learn-basic", 
            "text": "Basic Syntax: conditional, loop, function  Data Structure: number  Data Structure: string  Data Structure: collection   Data Structure: datetime", 
            "title": "Learn Basic"
        }, 
        {
            "location": "/#classes-and-inheritance", 
            "text": "Classes and Objects  Constructors  Encapsulation  Inheritance  Polymorphism  Abstraction", 
            "title": "Classes and Inheritance"
        }, 
        {
            "location": "/#go-deeper", 
            "text": "Files   IO  Operating System Programming  Networking Programming  Concurrency and Parallelism Programming  Event Based Programming  Web Development", 
            "title": "Go Deeper"
        }, 
        {
            "location": "/#software-development", 
            "text": "Error Handling  Logging  Configuration  Command Line  Testing  IDE  Package Manager  Build Tool  Environment  Module  Production", 
            "title": "Software Development"
        }, 
        {
            "location": "/#miscellaneous", 
            "text": "Books  Courses", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/get_started/", 
            "text": "Installation\n\n\nWindows\n\n\nIn this section I will show you how to Install Node.js\u00ae and NPM on Windows\n\n\nPrerequisites\n\n\nNode isn\u2019t a program that you simply launch like Word or Photoshop: you won\u2019t find it pinned to the taskbar or in your list of Apps. To use Node you must type command-line instructions, so you need to be comfortable with (or at least know how to start) a command-line tool like the Windows Command Prompt, PowerShell, Cygwin, or the Git shell (which is installed along with Github for Windows).\n\n\nInstallation Overview\n\n\nInstalling Node and NPM is pretty straightforward using the installer package available from the Node.js\u00ae web site.\n\n\nInstallation Steps\n\n\n1.\n \nDownload the Windows installer\n from the \nNodes.js\u00ae\n web site.\n\n\n2.\n \nRun the installer\n (the .msi file you downloaded in the previous step.)\n\n\n3.\n \nFollow the prompts in the installer\n (Accept the license agreement, click the NEXT button a bunch of times and accept the default installation settings).\n\n\n\n\n\n\n\n\n4.\n \nRestart your computer.\n You won\u2019t be able to run Node.js\u00ae until you restart your computer.\n\n\nUbuntu\n\n\nIn this section I will show you how to Install Node.js\u00ae and NPM on Ubuntu\n\n\n# update os\nsudo apt-get update\n# install node with apt-get\nsudo apt-get install nodejs\n# install npm with apt-get\nsudo apt-get install npm\n\n\n\n\nTest\n\n\nMake sure you have Node and NPM installed by running simple commands to see what version of each is installed and to run a simple test program:\n\n\n node -v\nv6.9.5\n\n\n npm -v\n3.10.10\n\n\n\n\nSuggested Readings\n\n\n\n\nHow To Install Node.js on an Ubuntu 14.04 server\n\n\nHow to Install Node.js\u00ae and NPM on Windows", 
            "title": "Get Started"
        }, 
        {
            "location": "/get_started/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/get_started/#windows", 
            "text": "In this section I will show you how to Install Node.js\u00ae and NPM on Windows", 
            "title": "Windows"
        }, 
        {
            "location": "/get_started/#prerequisites", 
            "text": "Node isn\u2019t a program that you simply launch like Word or Photoshop: you won\u2019t find it pinned to the taskbar or in your list of Apps. To use Node you must type command-line instructions, so you need to be comfortable with (or at least know how to start) a command-line tool like the Windows Command Prompt, PowerShell, Cygwin, or the Git shell (which is installed along with Github for Windows).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/get_started/#installation-overview", 
            "text": "Installing Node and NPM is pretty straightforward using the installer package available from the Node.js\u00ae web site.", 
            "title": "Installation Overview"
        }, 
        {
            "location": "/get_started/#installation-steps", 
            "text": "1.   Download the Windows installer  from the  Nodes.js\u00ae  web site.  2.   Run the installer  (the .msi file you downloaded in the previous step.)  3.   Follow the prompts in the installer  (Accept the license agreement, click the NEXT button a bunch of times and accept the default installation settings).     4.   Restart your computer.  You won\u2019t be able to run Node.js\u00ae until you restart your computer.", 
            "title": "Installation Steps"
        }, 
        {
            "location": "/get_started/#ubuntu", 
            "text": "In this section I will show you how to Install Node.js\u00ae and NPM on Ubuntu  # update os\nsudo apt-get update\n# install node with apt-get\nsudo apt-get install nodejs\n# install npm with apt-get\nsudo apt-get install npm", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/get_started/#test", 
            "text": "Make sure you have Node and NPM installed by running simple commands to see what version of each is installed and to run a simple test program:   node -v\nv6.9.5  npm -v\n3.10.10", 
            "title": "Test"
        }, 
        {
            "location": "/get_started/#suggested-readings", 
            "text": "How To Install Node.js on an Ubuntu 14.04 server  How to Install Node.js\u00ae and NPM on Windows", 
            "title": "Suggested Readings"
        }, 
        {
            "location": "/basic_syntax/", 
            "text": "Print\n\n\nconsole.log(\nHello World\n);\n\n\n\n\nConditional\n\n\nif(you_smart){\n    console.log(\nlearn nodejs\n);\n} else {\n    console.log(\ngo away\n);\n}\n\n\n\n\nLoop\n\n\nfor(var count = 0; count \n 10; count++){\n    console.log(count);\n}\n\n\n\n\nFunction\n\n\nfunction print_info(arg1, arg2){\n    console.log(arg1);\n    console.log(arg2);\n}", 
            "title": "Basic Syntax"
        }, 
        {
            "location": "/basic_syntax/#print", 
            "text": "console.log( Hello World );", 
            "title": "Print"
        }, 
        {
            "location": "/basic_syntax/#conditional", 
            "text": "if(you_smart){\n    console.log( learn nodejs );\n} else {\n    console.log( go away );\n}", 
            "title": "Conditional"
        }, 
        {
            "location": "/basic_syntax/#loop", 
            "text": "for(var count = 0; count   10; count++){\n    console.log(count);\n}", 
            "title": "Loop"
        }, 
        {
            "location": "/basic_syntax/#function", 
            "text": "function print_info(arg1, arg2){\n    console.log(arg1);\n    console.log(arg2);\n}", 
            "title": "Function"
        }, 
        {
            "location": "/io/", 
            "text": "File System \n IO\n\n\nNode implements File I/O using simple wrappers around standard POSIX functions. The Node File System (fs) module can be imported using the following syntax \u2212\n\n\nvar fs = require(\nfs\n)\n\n\n\n\nSynchronous vs Asynchronous\n\n\nEvery method in the fs module has synchronous as well as asynchronous forms. Asynchronous methods take the last parameter as the completion function callback and the first parameter of the callback function as error. It is better to use an asynchronous method instead of a synchronous method, as the former never blocks a program during its execution, whereas the second one does.\n\n\nExample\n\n\nCreate a text file named \ninput.txt\n with the following content \u2212\n\n\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\n\n\n\nLet us create a js file named \nmain.js\n with the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\n// Asynchronous read\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nAsynchronous read: \n + data.toString());\n});\n\n// Synchronous read\nvar data = fs.readFileSync('input.txt');\nconsole.log(\nSynchronous read: \n + data.toString());\n\nconsole.log(\nProgram Ended\n);\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nSynchronous read: Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\nProgram Ended\nAsynchronous read: Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\nThe following sections in this chapter provide a set of good examples on major File I/O methods.\n\n\n\n\nOpen a File\n\n\nSyntax\n\n\nFollowing is the syntax of the method to open a file in asynchronous mode \u2212\n\n\nfs.open(path, flags[, mode], callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath \u2212 This is the string having file name including path.\n\n\nflags \u2212 Flags indicate the behavior of the file to be opened. All possible values have been mentioned below.\n\n\nmode \u2212 It sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.\n\n\ncallback \u2212 This is the callback function which gets two arguments (err, fd).\n\n\n\n\nFlags\n\n\nFlags for read/write operations are \u2212\n\n\n\n\nr - Open file for reading. An exception occurs if the file does not exist.\n\n\nr+ - Open file for reading and writing. An exception occurs if the file does not exist.\n\n\nrs - Open file for reading in synchronous mode.\n\n\nrs+ - Open file for reading and writing, asking the OS to open it synchronously. See notes for 'rs' about using this with caution.\n\n\nw - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n\n\nwx - Like 'w' but fails if the path exists.\n\n\nw+ - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n\n\nwx+ - Like 'w+' but fails if path exists.\n\n\na - Open file for appending. The file is created if it does not exist.\n\n\nax - Like 'a' but fails if the path exists.\n\n\na+ - Open file for reading and appending. The file is created if it does not exist.\n\n\nax+ - Like 'a+' but fails if the the path exists.\n\n\n\n\nExample\n\n\nLet us create a js file named main.js having the following code to open a file input.txt for reading and writing.\n\n\nvar fs = require(\nfs\n);\n\n// Asynchronous - Opening File\nconsole.log(\nGoing to open file!\n);\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n  console.log(\nFile opened successfully!\n);     \n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to open file!\nFile opened successfully!\n\n\n\n\nGet File Information\n\n\nSyntax\n\n\nFollowing is the syntax of the method to get the information about a file \u2212\n\n\nfs.stat(path, callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath\n \u2212 This is the string having file name including path.\n\n\ncallback\n \u2212 This is the callback function which gets two arguments (err, stats) where stats is an object of fs.Stats type which is printed below in the example.\n\n\n\n\nApart from the important attributes which are printed below in the example, there are several useful methods available in fs.Stats class which can be used to check file type. These methods are given in the following table.\n\n\nMethod  Description\n\n\n\n\nstats.isFile() - Returns true if file type of a simple file.\n\n\nstats.isDirectory() - Returns true if file type of a directory.\n\n\nstats.isBlockDevice() - Returns true if file type of a block device.\n\n\nstats.isCharacterDevice() - Returns true if file type of a character device.\n\n\nstats.isSymbolicLink() - Returns true if file type of a symbolic link.\n\n\nstats.isFIFO() - Returns true if file type of a FIFO.\n\n\nstats.isSocket() - Returns true if file type of asocket.\n\n\n\n\nExample\n\n\nLet us create a js file named main.js with the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\nconsole.log(\nGoing to get file info!\n);\nfs.stat('input.txt', function (err, stats) {\n   if (err) {\n       return console.error(err);\n   }\n   console.log(stats);\n   console.log(\nGot file info successfully!\n);\n\n   // Check file type\n   console.log(\nisFile ? \n + stats.isFile());\n   console.log(\nisDirectory ? \n + stats.isDirectory());    \n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to get file info!\n{ \n   dev: 1792,\n   mode: 33188,\n   nlink: 1,\n   uid: 48,\n   gid: 48,\n   rdev: 0,\n   blksize: 4096,\n   ino: 4318127,\n   size: 97,\n   blocks: 8,\n   atime: Sun Mar 22 2015 13:40:00 GMT-0500 (CDT),\n   mtime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT),\n   ctime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT) \n}\nGot file info successfully!\nisFile ? true\nisDirectory ? false\n\n\n\n\nWriting a File\n\n\nSyntax\n\n\nFollowing is the syntax of one of the methods to write into a file \u2212\n\n\nfs.writeFile(filename, data[, options], callback)\n\n\n\n\nThis method will over-write the file if the file already exists. If you want to write into an existing file then you should use another method available.\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath \u2212 This is the string having the file name including path.\n\n\ndata \u2212 This is the String or Buffer to be written into the file.\n\n\noptions \u2212 The third parameter is an object which will hold {encoding, mode, flag}. By default. encoding is utf8, mode is octal value 0666. and flag is 'w'\n\n\ncallback \u2212 This is the callback function which gets a single parameter err that returns an error in case of any writing error.\n\n\n\n\nExample\n\n\nLet us create a js file named \nmain.js\n having the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\nconsole.log(\nGoing to write into existing file\n);\nfs.writeFile('input.txt', 'Simply Easy Learning!',  function(err) {\n   if (err) {\n      return console.error(err);\n   }\n\n   console.log(\nData written successfully!\n);\n   console.log(\nLet's read newly written data\n);\n   fs.readFile('input.txt', function (err, data) {\n      if (err) {\n         return console.error(err);\n      }\n      console.log(\nAsynchronous read: \n + data.toString());\n   });\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to write into existing file\nData written successfully!\nLet's read newly written data\nAsynchronous read: Simply Easy Learning!\n\n\n\n\nReading a File\n\n\nSyntax\n\n\nFollowing is the syntax of one of the methods to read from a file \u2212\n\n\nfs.read(fd, buffer, offset, length, position, callback)\n\n\n\n\nThis method will use file descriptor to read the file. If you want to read the file directly using the file name, then you should use another method available.\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\nfd \u2212 This is the file descriptor returned by fs.open().\n\n\nbuffer \u2212 This is the buffer that the data will be written to.\n\n\noffset \u2212 This is the offset in the buffer to start writing at.\n\n\nlength \u2212 This is an integer specifying the number of bytes to read.\n\n\nposition \u2212 This is an integer specifying where to begin reading from in the file. * If position is null, data will be read from the current file position.\ncallback \u2212 This is the callback function which gets the three arguments, (err, bytesRead, buffer).\n\n\n\n\nExample\n\n\nLet us create a js file named main.js with the following code \u2212\n\n\nvar fs = require(\nfs\n);\nvar buf = new Buffer(1024);\n\nconsole.log(\nGoing to open an existing file\n);\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nFile opened successfully!\n);\n   console.log(\nGoing to read the file\n);\n   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n      if (err){\n         console.log(err);\n      }\n      console.log(bytes + \n bytes read\n);\n\n      // Print only read bytes to avoid junk.\n      if(bytes \n 0){\n         console.log(buf.slice(0, bytes).toString());\n      }\n   });\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to open an existing file\nFile opened successfully!\nGoing to read the file\n97 bytes read\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\n\n\n\nClosing a File\n\n\nSyntax\n\n\nFollowing is the syntax to close an opened file \u2212\n\n\nfs.close(fd, callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\nfd \u2212 This is the file descriptor returned by file fs.open() method.\n\n\ncallback \u2212 This is the callback function No arguments other than a possible exception are given to the completion callback.\n\n\n\n\nExample\n\nLet us create a js file named \nmain.js\n having the following code \u2212\n\n\nvar fs = require(\nfs\n);\nvar buf = new Buffer(1024);\n\nconsole.log(\nGoing to open an existing file\n);\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nFile opened successfully!\n);\n   console.log(\nGoing to read the file\n);\n\n   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n      if (err){\n         console.log(err);\n      }\n\n      // Print only read bytes to avoid junk.\n      if(bytes \n 0){\n         console.log(buf.slice(0, bytes).toString());\n      }\n\n      // Close the opened file.\n      fs.close(fd, function(err){\n         if (err){\n            console.log(err);\n         } \n         console.log(\nFile closed successfully.\n);\n      });\n   });\n});\n\n\n\n\nNow run the \nmain.js\n to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to open an existing file\nFile opened successfully!\nGoing to read the file\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\nFile closed successfully.\n\n\n\n\nTruncate a File\n\n\nSyntax\n\n\nFollowing is the syntax of the method to truncate an opened file \u2212\n\n\nfs.ftruncate(fd, len, callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\nfd \u2212 This is the file descriptor returned by fs.open().\n\n\nlen \u2212 This is the length of the file after which the file will be truncated.\n\n\ncallback \u2212 This is the callback function No arguments other than a possible ekxception are given to the completion callback.\n\n\n\n\nExample\n\n\nLet us create a js file named \nmain.js\n having the following code \u2212\n\n\nvar fs = require(\nfs\n);\nvar buf = new Buffer(1024);\n\nconsole.log(\nGoing to open an existing file\n);\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nFile opened successfully!\n);\n   console.log(\nGoing to truncate the file after 10 bytes\n);\n\n   // Truncate the opened file.\n   fs.ftruncate(fd, 10, function(err){\n      if (err){\n         console.log(err);\n      } \n      console.log(\nFile truncated successfully.\n);\n      console.log(\nGoing to read the same file\n); \n\n      fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n         if (err){\n            console.log(err);\n         }\n\n         // Print only read bytes to avoid junk.\n         if(bytes \n 0){\n            console.log(buf.slice(0, bytes).toString());\n         }\n\n         // Close the opened file.\n         fs.close(fd, function(err){\n            if (err){\n               console.log(err);\n            } \n            console.log(\nFile closed successfully.\n);\n         });\n      });\n   });\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to open an existing file\nFile opened successfully!\nGoing to truncate the file after 10 bytes\nFile truncated successfully.\nGoing to read the same file\nTutorials \nFile closed successfully.\n\n\n\n\nDelete a File\n\n\nSyntax\n\nFollowing is the syntax of the method to delete a file \u2212\n\n\nfs.unlink(path, callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath \u2212 This is the file name including path.\n\n\ncallback \u2212 This is the callback function No arguments other than a possible exception are given to the completion callback.\n\n\n\n\nExample\n\n\nLet us create a js file named main.js having the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\nconsole.log(\nGoing to delete an existing file\n);\nfs.unlink('input.txt', function(err) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nFile deleted successfully!\n);\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to delete an existing file\nFile deleted successfully!\n\n\n\n\nCreate a Directory\n\n\nSyntax\n\n\nFollowing is the syntax of the method to create a directory \u2212\n\n\nfs.mkdir(path[, mode], callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath \u2212 This is the directory name including path.\n\n\nmode \u2212 This is the directory permission to be set. Defaults to 0777.\n\n\ncallback \u2212 This is the callback function No arguments other than a possible exception are given to the completion callback.\n\n\n\n\nExample\n\n\nLet us create a js file named main.js having the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\nconsole.log(\nGoing to create directory /tmp/test\n);\nfs.mkdir('/tmp/test',function(err){\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nDirectory created successfully!\n);\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to create directory /tmp/test\nDirectory created successfully!\n\n\n\n\nRead a Directory\n\n\nSyntax\n\n\nFollowing is the syntax of the method to read a directory \u2212\n\n\nfs.readdir(path, callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath \u2212 This is the directory name including path.\n\n\ncallback \u2212 This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.\n\n\n\n\nExample\n\n\nLet us create a js file named main.js having the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\nconsole.log(\nGoing to read directory /tmp\n);\nfs.readdir(\n/tmp/\n,function(err, files){\n   if (err) {\n      return console.error(err);\n   }\n   files.forEach( function (file){\n      console.log( file );\n   });\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to read directory /tmp\nccmzx99o.out\nccyCSbkF.out\nemployee.ser\nhsperfdata_apache\ntest\ntest.txt\n\n\n\n\nRemove a Directory\n\n\nSyntax\n\n\nFollowing is the syntax of the method to remove a directory \u2212\n\n\nfs.rmdir(path, callback)\n\n\n\n\nParameters\n\n\nHere is the description of the parameters used \u2212\n\n\n\n\npath \u2212 This is the directory name including path.\n\n\ncallback \u2212 This is the callback function No argume nts other than a possible exception are given to the completion callback.\n\n\n\n\nExample\n\n\nLet us create a js file named main.js having the following code \u2212\n\n\nvar fs = require(\nfs\n);\n\nconsole.log(\nGoing to delete directory /tmp/test\n);\nfs.rmdir(\n/tmp/test\n,function(err){\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\nGoing to read directory /tmp\n);\n\n   fs.readdir(\n/tmp/\n,function(err, files){\n      if (err) {\n         return console.error(err);\n      }\n      files.forEach( function (file){\n         console.log( file );\n      });\n   });\n});\n\n\n\n\nNow run the main.js to see the result \u2212\n\n\n$ node main.js\n\n\n\n\nVerify the Output.\n\n\nGoing to read directory /tmp\nccmzx99o.out\nccyCSbkF.out\nemployee.ser\nhsperfdata_apache\ntest.txt", 
            "title": "File System & IO"
        }, 
        {
            "location": "/io/#file-system-io", 
            "text": "Node implements File I/O using simple wrappers around standard POSIX functions. The Node File System (fs) module can be imported using the following syntax \u2212  var fs = require( fs )", 
            "title": "File System &amp; IO"
        }, 
        {
            "location": "/io/#synchronous-vs-asynchronous", 
            "text": "Every method in the fs module has synchronous as well as asynchronous forms. Asynchronous methods take the last parameter as the completion function callback and the first parameter of the callback function as error. It is better to use an asynchronous method instead of a synchronous method, as the former never blocks a program during its execution, whereas the second one does.  Example  Create a text file named  input.txt  with the following content \u2212  Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!  Let us create a js file named  main.js  with the following code \u2212  var fs = require( fs );\n\n// Asynchronous read\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log( Asynchronous read:   + data.toString());\n});\n\n// Synchronous read\nvar data = fs.readFileSync('input.txt');\nconsole.log( Synchronous read:   + data.toString());\n\nconsole.log( Program Ended );  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Synchronous read: Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\nProgram Ended\nAsynchronous read: Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\nThe following sections in this chapter provide a set of good examples on major File I/O methods.", 
            "title": "Synchronous vs Asynchronous"
        }, 
        {
            "location": "/io/#open-a-file", 
            "text": "Syntax  Following is the syntax of the method to open a file in asynchronous mode \u2212  fs.open(path, flags[, mode], callback)  Parameters  Here is the description of the parameters used \u2212   path \u2212 This is the string having file name including path.  flags \u2212 Flags indicate the behavior of the file to be opened. All possible values have been mentioned below.  mode \u2212 It sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.  callback \u2212 This is the callback function which gets two arguments (err, fd).   Flags  Flags for read/write operations are \u2212   r - Open file for reading. An exception occurs if the file does not exist.  r+ - Open file for reading and writing. An exception occurs if the file does not exist.  rs - Open file for reading in synchronous mode.  rs+ - Open file for reading and writing, asking the OS to open it synchronously. See notes for 'rs' about using this with caution.  w - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).  wx - Like 'w' but fails if the path exists.  w+ - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).  wx+ - Like 'w+' but fails if path exists.  a - Open file for appending. The file is created if it does not exist.  ax - Like 'a' but fails if the path exists.  a+ - Open file for reading and appending. The file is created if it does not exist.  ax+ - Like 'a+' but fails if the the path exists.   Example  Let us create a js file named main.js having the following code to open a file input.txt for reading and writing.  var fs = require( fs );\n\n// Asynchronous - Opening File\nconsole.log( Going to open file! );\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n  console.log( File opened successfully! );     \n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to open file!\nFile opened successfully!", 
            "title": "Open a File"
        }, 
        {
            "location": "/io/#get-file-information", 
            "text": "Syntax  Following is the syntax of the method to get the information about a file \u2212  fs.stat(path, callback)  Parameters  Here is the description of the parameters used \u2212   path  \u2212 This is the string having file name including path.  callback  \u2212 This is the callback function which gets two arguments (err, stats) where stats is an object of fs.Stats type which is printed below in the example.   Apart from the important attributes which are printed below in the example, there are several useful methods available in fs.Stats class which can be used to check file type. These methods are given in the following table.  Method  Description   stats.isFile() - Returns true if file type of a simple file.  stats.isDirectory() - Returns true if file type of a directory.  stats.isBlockDevice() - Returns true if file type of a block device.  stats.isCharacterDevice() - Returns true if file type of a character device.  stats.isSymbolicLink() - Returns true if file type of a symbolic link.  stats.isFIFO() - Returns true if file type of a FIFO.  stats.isSocket() - Returns true if file type of asocket.   Example  Let us create a js file named main.js with the following code \u2212  var fs = require( fs );\n\nconsole.log( Going to get file info! );\nfs.stat('input.txt', function (err, stats) {\n   if (err) {\n       return console.error(err);\n   }\n   console.log(stats);\n   console.log( Got file info successfully! );\n\n   // Check file type\n   console.log( isFile ?   + stats.isFile());\n   console.log( isDirectory ?   + stats.isDirectory());    \n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to get file info!\n{ \n   dev: 1792,\n   mode: 33188,\n   nlink: 1,\n   uid: 48,\n   gid: 48,\n   rdev: 0,\n   blksize: 4096,\n   ino: 4318127,\n   size: 97,\n   blocks: 8,\n   atime: Sun Mar 22 2015 13:40:00 GMT-0500 (CDT),\n   mtime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT),\n   ctime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT) \n}\nGot file info successfully!\nisFile ? true\nisDirectory ? false", 
            "title": "Get File Information"
        }, 
        {
            "location": "/io/#writing-a-file", 
            "text": "Syntax  Following is the syntax of one of the methods to write into a file \u2212  fs.writeFile(filename, data[, options], callback)  This method will over-write the file if the file already exists. If you want to write into an existing file then you should use another method available.  Parameters  Here is the description of the parameters used \u2212   path \u2212 This is the string having the file name including path.  data \u2212 This is the String or Buffer to be written into the file.  options \u2212 The third parameter is an object which will hold {encoding, mode, flag}. By default. encoding is utf8, mode is octal value 0666. and flag is 'w'  callback \u2212 This is the callback function which gets a single parameter err that returns an error in case of any writing error.   Example  Let us create a js file named  main.js  having the following code \u2212  var fs = require( fs );\n\nconsole.log( Going to write into existing file );\nfs.writeFile('input.txt', 'Simply Easy Learning!',  function(err) {\n   if (err) {\n      return console.error(err);\n   }\n\n   console.log( Data written successfully! );\n   console.log( Let's read newly written data );\n   fs.readFile('input.txt', function (err, data) {\n      if (err) {\n         return console.error(err);\n      }\n      console.log( Asynchronous read:   + data.toString());\n   });\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to write into existing file\nData written successfully!\nLet's read newly written data\nAsynchronous read: Simply Easy Learning!", 
            "title": "Writing a File"
        }, 
        {
            "location": "/io/#reading-a-file", 
            "text": "Syntax  Following is the syntax of one of the methods to read from a file \u2212  fs.read(fd, buffer, offset, length, position, callback)  This method will use file descriptor to read the file. If you want to read the file directly using the file name, then you should use another method available.  Parameters  Here is the description of the parameters used \u2212   fd \u2212 This is the file descriptor returned by fs.open().  buffer \u2212 This is the buffer that the data will be written to.  offset \u2212 This is the offset in the buffer to start writing at.  length \u2212 This is an integer specifying the number of bytes to read.  position \u2212 This is an integer specifying where to begin reading from in the file. * If position is null, data will be read from the current file position.\ncallback \u2212 This is the callback function which gets the three arguments, (err, bytesRead, buffer).   Example  Let us create a js file named main.js with the following code \u2212  var fs = require( fs );\nvar buf = new Buffer(1024);\n\nconsole.log( Going to open an existing file );\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log( File opened successfully! );\n   console.log( Going to read the file );\n   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n      if (err){\n         console.log(err);\n      }\n      console.log(bytes +   bytes read );\n\n      // Print only read bytes to avoid junk.\n      if(bytes   0){\n         console.log(buf.slice(0, bytes).toString());\n      }\n   });\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to open an existing file\nFile opened successfully!\nGoing to read the file\n97 bytes read\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!", 
            "title": "Reading a File"
        }, 
        {
            "location": "/io/#closing-a-file", 
            "text": "Syntax  Following is the syntax to close an opened file \u2212  fs.close(fd, callback)  Parameters  Here is the description of the parameters used \u2212   fd \u2212 This is the file descriptor returned by file fs.open() method.  callback \u2212 This is the callback function No arguments other than a possible exception are given to the completion callback.   Example \nLet us create a js file named  main.js  having the following code \u2212  var fs = require( fs );\nvar buf = new Buffer(1024);\n\nconsole.log( Going to open an existing file );\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log( File opened successfully! );\n   console.log( Going to read the file );\n\n   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n      if (err){\n         console.log(err);\n      }\n\n      // Print only read bytes to avoid junk.\n      if(bytes   0){\n         console.log(buf.slice(0, bytes).toString());\n      }\n\n      // Close the opened file.\n      fs.close(fd, function(err){\n         if (err){\n            console.log(err);\n         } \n         console.log( File closed successfully. );\n      });\n   });\n});  Now run the  main.js  to see the result \u2212  $ node main.js  Verify the Output.  Going to open an existing file\nFile opened successfully!\nGoing to read the file\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\nFile closed successfully.", 
            "title": "Closing a File"
        }, 
        {
            "location": "/io/#truncate-a-file", 
            "text": "Syntax  Following is the syntax of the method to truncate an opened file \u2212  fs.ftruncate(fd, len, callback)  Parameters  Here is the description of the parameters used \u2212   fd \u2212 This is the file descriptor returned by fs.open().  len \u2212 This is the length of the file after which the file will be truncated.  callback \u2212 This is the callback function No arguments other than a possible ekxception are given to the completion callback.   Example  Let us create a js file named  main.js  having the following code \u2212  var fs = require( fs );\nvar buf = new Buffer(1024);\n\nconsole.log( Going to open an existing file );\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log( File opened successfully! );\n   console.log( Going to truncate the file after 10 bytes );\n\n   // Truncate the opened file.\n   fs.ftruncate(fd, 10, function(err){\n      if (err){\n         console.log(err);\n      } \n      console.log( File truncated successfully. );\n      console.log( Going to read the same file ); \n\n      fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n         if (err){\n            console.log(err);\n         }\n\n         // Print only read bytes to avoid junk.\n         if(bytes   0){\n            console.log(buf.slice(0, bytes).toString());\n         }\n\n         // Close the opened file.\n         fs.close(fd, function(err){\n            if (err){\n               console.log(err);\n            } \n            console.log( File closed successfully. );\n         });\n      });\n   });\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to open an existing file\nFile opened successfully!\nGoing to truncate the file after 10 bytes\nFile truncated successfully.\nGoing to read the same file\nTutorials \nFile closed successfully.", 
            "title": "Truncate a File"
        }, 
        {
            "location": "/io/#delete-a-file", 
            "text": "Syntax \nFollowing is the syntax of the method to delete a file \u2212  fs.unlink(path, callback)  Parameters  Here is the description of the parameters used \u2212   path \u2212 This is the file name including path.  callback \u2212 This is the callback function No arguments other than a possible exception are given to the completion callback.   Example  Let us create a js file named main.js having the following code \u2212  var fs = require( fs );\n\nconsole.log( Going to delete an existing file );\nfs.unlink('input.txt', function(err) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log( File deleted successfully! );\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to delete an existing file\nFile deleted successfully!", 
            "title": "Delete a File"
        }, 
        {
            "location": "/io/#create-a-directory", 
            "text": "Syntax  Following is the syntax of the method to create a directory \u2212  fs.mkdir(path[, mode], callback)  Parameters  Here is the description of the parameters used \u2212   path \u2212 This is the directory name including path.  mode \u2212 This is the directory permission to be set. Defaults to 0777.  callback \u2212 This is the callback function No arguments other than a possible exception are given to the completion callback.   Example  Let us create a js file named main.js having the following code \u2212  var fs = require( fs );\n\nconsole.log( Going to create directory /tmp/test );\nfs.mkdir('/tmp/test',function(err){\n   if (err) {\n      return console.error(err);\n   }\n   console.log( Directory created successfully! );\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to create directory /tmp/test\nDirectory created successfully!", 
            "title": "Create a Directory"
        }, 
        {
            "location": "/io/#read-a-directory", 
            "text": "Syntax  Following is the syntax of the method to read a directory \u2212  fs.readdir(path, callback)  Parameters  Here is the description of the parameters used \u2212   path \u2212 This is the directory name including path.  callback \u2212 This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.   Example  Let us create a js file named main.js having the following code \u2212  var fs = require( fs );\n\nconsole.log( Going to read directory /tmp );\nfs.readdir( /tmp/ ,function(err, files){\n   if (err) {\n      return console.error(err);\n   }\n   files.forEach( function (file){\n      console.log( file );\n   });\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to read directory /tmp\nccmzx99o.out\nccyCSbkF.out\nemployee.ser\nhsperfdata_apache\ntest\ntest.txt", 
            "title": "Read a Directory"
        }, 
        {
            "location": "/io/#remove-a-directory", 
            "text": "Syntax  Following is the syntax of the method to remove a directory \u2212  fs.rmdir(path, callback)  Parameters  Here is the description of the parameters used \u2212   path \u2212 This is the directory name including path.  callback \u2212 This is the callback function No argume nts other than a possible exception are given to the completion callback.   Example  Let us create a js file named main.js having the following code \u2212  var fs = require( fs );\n\nconsole.log( Going to delete directory /tmp/test );\nfs.rmdir( /tmp/test ,function(err){\n   if (err) {\n      return console.error(err);\n   }\n   console.log( Going to read directory /tmp );\n\n   fs.readdir( /tmp/ ,function(err, files){\n      if (err) {\n         return console.error(err);\n      }\n      files.forEach( function (file){\n         console.log( file );\n      });\n   });\n});  Now run the main.js to see the result \u2212  $ node main.js  Verify the Output.  Going to read directory /tmp\nccmzx99o.out\nccyCSbkF.out\nemployee.ser\nhsperfdata_apache\ntest.txt", 
            "title": "Remove a Directory"
        }, 
        {
            "location": "/package_manager/", 
            "text": "Package Manager: NPM\n\n\nNode Package Manager (NPM) provides two main functionalities \u2212\n\n\n\n\nOnline repositories for node.js packages/modules which are searchable on search.nodejs.org\n\n\nCommand line utility to install Node.js packages, do version management and dependency management of Node.js packages.\n\n\n\n\nNPM comes bundled with Node.js installables after v0.6.3 version. To verify the same, open console and type the following command and see the result \u2212\n\n\n$ npm --version\n2.7.1\n\n\n\n\nIf you are running an old version of NPM then it is quite easy to update it to the latest version. Just use the following command from root \u2212\n\n\n$ sudo npm install npm -g\n/usr/bin/npm -\n /usr/lib/node_modules/npm/bin/npm-cli.js\nnpm@2.7.1 /usr/lib/node_modules/npm\n\n\n\n\nInstalling Modules\n\n\nThere is a simple syntax to install any Node.js module \u2212\n\n\n$ npm install \nModule Name\n\n\n\n\n\nFor example, following is the command to install a famous Node.js web framework module called express \u2212\n\n\n$ npm install express\n\n\n\n\nNow you can use this module in your js file as following \u2212\n\n\nvar express = require('express');\n\n\n\n\nGlobal vs Local Installation\n\n\nBy default, NPM installs any dependency in the local mode. Here local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. Locally deployed packages are accessible via require() method. For example, when we installed express module, it created node_modules directory in the current directory where it installed the express module.\n\n\n$ ls -l\ntotal 0\ndrwxr-xr-x 3 root root 20 Mar 17 02:23 node_modules\n\n\n\n\nAlternatively, you can use npm ls command to list down all the locally installed modules.\n\n\nGlobally installed packages/dependencies are stored in system directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but cannot be imported using require() in Node application directly. Now let's try installing the express module using global installation.\n\n\n$ npm install express -g\n\n\n\n\nThis will produce a similar result but the module will be installed globally. Here, the first line shows the module version and the location where it is getting installed.\n\n\nexpress@4.12.2 /usr/lib/node_modules/express\n\u251c\u2500\u2500 merge-descriptors@1.0.0\n\u251c\u2500\u2500 utils-merge@1.0.0\n\u251c\u2500\u2500 cookie-signature@1.0.6\n\u251c\u2500\u2500 methods@1.1.1\n\u251c\u2500\u2500 fresh@0.2.4\n\u251c\u2500\u2500 cookie@0.1.2\n\u251c\u2500\u2500 escape-html@1.0.1\n\u251c\u2500\u2500 range-parser@1.0.2\n\u251c\u2500\u2500 content-type@1.0.1\n\u251c\u2500\u2500 finalhandler@0.3.3\n\u251c\u2500\u2500 vary@1.0.0\n\u251c\u2500\u2500 parseurl@1.3.0\n\u251c\u2500\u2500 content-disposition@0.5.0\n\u251c\u2500\u2500 path-to-regexp@0.1.3\n\u251c\u2500\u2500 depd@1.0.0\n\u251c\u2500\u2500 qs@2.3.3\n\u251c\u2500\u2500 on-finished@2.2.0 (ee-first@1.1.0)\n\u251c\u2500\u2500 etag@1.5.1 (crc@3.2.1)\n\u251c\u2500\u2500 debug@2.1.3 (ms@0.7.0)\n\u251c\u2500\u2500 proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)\n\u251c\u2500\u2500 send@0.12.1 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)\n\u251c\u2500\u2500 serve-static@1.9.2 (send@0.12.2)\n\u251c\u2500\u2500 accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)\n\u2514\u2500\u2500 type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)\n\n\n\n\nYou can use the following command to check all the modules installed globally \u2212\n\n\n$ npm ls -g\n\n\n\n\nUsing package.json\n\n\npackage.json is present in the root directory of any Node application/module and is used to define the properties of a package. Let's open package.json of express package present in node_modules/express/\n\n\n{\n   \nname\n: \nexpress\n,\n      \ndescription\n: \nFast, unopinionated, minimalist web framework\n,\n      \nversion\n: \n4.11.2\n,\n      \nauthor\n: {\n\n         \nname\n: \nTJ Holowaychuk\n,\n         \nemail\n: \ntj@vision-media.ca\n\n      },\n\n   \ncontributors\n: [{\n      \nname\n: \nAaron Heckmann\n,\n      \nemail\n: \naaron.heckmann+github@gmail.com\n\n   }, \n\n   {\n      \nname\n: \nCiaran Jessup\n,\n      \nemail\n: \nciaranj@gmail.com\n\n   },\n\n   {\n      \nname\n: \nDouglas Christopher Wilson\n,\n      \nemail\n: \ndoug@somethingdoug.com\n\n   },\n\n   {\n      \nname\n: \nGuillermo Rauch\n,\n      \nemail\n: \nrauchg@gmail.com\n\n   },\n\n   {\n      \nname\n: \nJonathan Ong\n,\n      \nemail\n: \nme@jongleberry.com\n\n   },\n\n   {\n      \nname\n: \nRoman Shtylman\n,\n      \nemail\n: \nshtylman+expressjs@gmail.com\n\n   },\n\n   {\n      \nname\n: \nYoung Jae Sim\n,\n      \nemail\n: \nhanul@hanul.me\n\n   } ],\n   \nlicense\n: \nMIT\n, \nrepository\n: {\n      \ntype\n: \ngit\n,\n      \nurl\n: \nhttps://github.com/strongloop/express\n\n   },\n   \nhomepage\n: \nhttps://expressjs.com/\n, \nkeywords\n: [\n      \nexpress\n,\n      \nframework\n,\n      \nsinatra\n,\n      \nweb\n,\n      \nrest\n,\n      \nrestful\n,\n      \nrouter\n,\n      \napp\n,\n      \napi\n\n   ],\n   \ndependencies\n: {\n      \naccepts\n: \n~1.2.3\n,\n      \ncontent-disposition\n: \n0.5.0\n,\n      \ncookie-signature\n: \n1.0.5\n,\n      \ndebug\n: \n~2.1.1\n,\n      \ndepd\n: \n~1.0.0\n,\n      \nescape-html\n: \n1.0.1\n,\n      \netag\n: \n~1.5.1\n,\n      \nfinalhandler\n: \n0.3.3\n,\n      \nfresh\n: \n0.2.4\n,\n      \nmedia-typer\n: \n0.3.0\n,\n      \nmethods\n: \n~1.1.1\n,\n      \non-finished\n: \n~2.2.0\n,\n      \nparseurl\n: \n~1.3.0\n,\n      \npath-to-regexp\n: \n0.1.3\n,\n      \nproxy-addr\n: \n~1.0.6\n,\n      \nqs\n: \n2.3.3\n,\n      \nrange-parser\n: \n~1.0.2\n,\n      \nsend\n: \n0.11.1\n,\n      \nserve-static\n: \n~1.8.1\n,\n      \ntype-is\n: \n~1.5.6\n,\n      \nvary\n: \n~1.0.0\n,\n      \ncookie\n: \n0.1.2\n,\n      \nmerge-descriptors\n: \n0.0.2\n,\n      \nutils-merge\n: \n1.0.0\n\n   },\n   \ndevDependencies\n: {\n      \nafter\n: \n0.8.1\n,\n      \nejs\n: \n2.1.4\n,\n      \nistanbul\n: \n0.3.5\n,\n      \nmarked\n: \n0.3.3\n,\n      \nmocha\n: \n~2.1.0\n,\n      \nshould\n: \n~4.6.2\n,\n      \nsupertest\n: \n~0.15.0\n,\n      \nhjs\n: \n~0.0.6\n,\n      \nbody-parser\n: \n~1.11.0\n,\n      \nconnect-redis\n: \n~2.2.0\n,\n      \ncookie-parser\n: \n~1.3.3\n,\n      \nexpress-session\n: \n~1.10.2\n,\n      \njade\n: \n~1.9.1\n,\n      \nmethod-override\n: \n~2.3.1\n,\n      \nmorgan\n: \n~1.5.1\n,\n      \nmultiparty\n: \n~4.1.1\n,\n      \nvhost\n: \n~3.0.0\n\n   },\n   \nengines\n: {\n      \nnode\n: \n= 0.10.0\n\n   },\n   \nfiles\n: [\n      \nLICENSE\n,\n      \nHistory.md\n,\n      \nReadme.md\n,\n      \nindex.js\n,\n      \nlib/\n\n   ],\n   \nscripts\n: {\n      \ntest\n: \nmocha --require test/support/env \n         --reporter spec --bail --check-leaks test/ test/acceptance/\n,\n      \ntest-cov\n: \nistanbul cover node_modules/mocha/bin/_mocha \n         -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/\n,\n      \ntest-tap\n: \nmocha --require test/support/env \n         --reporter tap --check-leaks test/ test/acceptance/\n,\n      \ntest-travis\n: \nistanbul cover node_modules/mocha/bin/_mocha \n         --report lcovonly -- --require test/support/env \n         --reporter spec --check-leaks test/ test/acceptance/\n\n   },\n   \ngitHead\n: \n63ab25579bda70b4927a179b580a9c580b6c7ada\n,\n   \nbugs\n: {\n      \nurl\n: \nhttps://github.com/strongloop/express/issues\n\n   },\n   \n_id\n: \nexpress@4.11.2\n,\n   \n_shasum\n: \n8df3d5a9ac848585f00a0777601823faecd3b148\n,\n   \n_from\n: \nexpress@*\n,\n   \n_npmVersion\n: \n1.4.28\n,\n   \n_npmUser\n: {\n      \nname\n: \ndougwilson\n,\n      \nemail\n: \ndoug@somethingdoug.com\n\n   },\n   \nmaintainers\n: [\n      {\n         \nname\n: \ntjholowaychuk\n,\n         \nemail\n: \ntj@vision-media.ca\n\n      },\n      {\n         \nname\n: \njongleberry\n,\n         \nemail\n: \njonathanrichardong@gmail.com\n\n      },\n      {\n         \nname\n: \nshtylman\n,\n         \nemail\n: \nshtylman@gmail.com\n\n      },\n      {\n         \nname\n: \ndougwilson\n,\n         \nemail\n: \ndoug@somethingdoug.com\n\n      },\n      {\n         \nname\n: \naredridel\n,\n         \nemail\n: \naredridel@nbtsc.org\n\n      },\n      {\n         \nname\n: \nstrongloop\n,\n         \nemail\n: \ncallback@strongloop.com\n\n      },\n      {\n         \nname\n: \nrfeng\n,\n         \nemail\n: \nenjoyjava@gmail.com\n\n      }\n   ],\n   \ndist\n: {\n      \nshasum\n: \n8df3d5a9ac848585f00a0777601823faecd3b148\n,\n      \ntarball\n: \nhttps://registry.npmjs.org/express/-/express-4.11.2.tgz\n\n   },\n   \ndirectories\n: {},\n      \n_resolved\n: \nhttps://registry.npmjs.org/express/-/express-4.11.2.tgz\n,\n      \nreadme\n: \nERROR: No README data found!\n\n}\n\n\n\n\nAttributes of Package.json\n\n\n\n\nname\n \u2212 name of the package\n\n\nversion\n \u2212 version of the package\n\n\ndescription\n \u2212 description of the package\n\n\nhomepage\n \u2212 homepage of the package\n\n\nauthor\n \u2212 author of the package\n\n\ncontributors\n \u2212 name of the contributors to the package\n\n\ndependencies\n \u2212 list of dependencies. NPM automatically installs all the dependencies mentioned here in the node_module folder of the package.\nrepository \u2212 repository type and URL of the package\n\n\nmain\n \u2212 entry point of the package\n\n\nkeywords\n \u2212 keywords\n\n\n\n\nUninstalling a Module\n\n\nUse the following command to uninstall a Node.js module.\n\n\n$ npm uninstall express\n\n\n\n\nOnce NPM uninstalls the package, you can verify it by looking at the content of /node_modules/ directory or type the following command \u2212\n\n\n$ npm ls\n\n\n\n\nUpdating a Module\n\n\nUpdate package.json and change the version of the dependency to be updated and run the following command.\n\n\n$ npm update express\n\n\n\n\nSearch a Module\n\n\nSearch a package name using NPM.\n\n\n$ npm search express\n\n\n\n\nCreate a Module\n\n\nCreating a module requires package.json to be generated. Let's generate package.json using NPM, which will generate the basic skeleton of the package.json.\n\n\n$ npm init\n\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sane defaults.\n\nSee 'npm help json' for definitive documentation on these fields\nand exactly what they do.\n\nUse 'npm install \npkg\n --save' afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (webmaster)\n\n\n\n\nYou will need to provide all the required information about your module. You can take help from the above-mentioned package.json file to understand the meanings of various information demanded. Once package.json is generated, use the following command to register yourself with NPM repository site using a valid email address.\n\n\n$ npm adduser\nUsername: mcmohd\nPassword:\nEmail: (this IS public) mcmohd@gmail.com\n\n\n\n\nIt is time now to publish your module \u2212\n\n\n$ npm publish\n\n\n\n\nIf everything is fine with your module, then it will be published in the repository and will be accessible to install using NPM like any other Node.js module.", 
            "title": "Package Manager"
        }, 
        {
            "location": "/package_manager/#package-manager-npm", 
            "text": "Node Package Manager (NPM) provides two main functionalities \u2212   Online repositories for node.js packages/modules which are searchable on search.nodejs.org  Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.   NPM comes bundled with Node.js installables after v0.6.3 version. To verify the same, open console and type the following command and see the result \u2212  $ npm --version\n2.7.1  If you are running an old version of NPM then it is quite easy to update it to the latest version. Just use the following command from root \u2212  $ sudo npm install npm -g\n/usr/bin/npm -  /usr/lib/node_modules/npm/bin/npm-cli.js\nnpm@2.7.1 /usr/lib/node_modules/npm", 
            "title": "Package Manager: NPM"
        }, 
        {
            "location": "/package_manager/#installing-modules", 
            "text": "There is a simple syntax to install any Node.js module \u2212  $ npm install  Module Name   For example, following is the command to install a famous Node.js web framework module called express \u2212  $ npm install express  Now you can use this module in your js file as following \u2212  var express = require('express');", 
            "title": "Installing Modules"
        }, 
        {
            "location": "/package_manager/#global-vs-local-installation", 
            "text": "By default, NPM installs any dependency in the local mode. Here local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. Locally deployed packages are accessible via require() method. For example, when we installed express module, it created node_modules directory in the current directory where it installed the express module.  $ ls -l\ntotal 0\ndrwxr-xr-x 3 root root 20 Mar 17 02:23 node_modules  Alternatively, you can use npm ls command to list down all the locally installed modules.  Globally installed packages/dependencies are stored in system directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but cannot be imported using require() in Node application directly. Now let's try installing the express module using global installation.  $ npm install express -g  This will produce a similar result but the module will be installed globally. Here, the first line shows the module version and the location where it is getting installed.  express@4.12.2 /usr/lib/node_modules/express\n\u251c\u2500\u2500 merge-descriptors@1.0.0\n\u251c\u2500\u2500 utils-merge@1.0.0\n\u251c\u2500\u2500 cookie-signature@1.0.6\n\u251c\u2500\u2500 methods@1.1.1\n\u251c\u2500\u2500 fresh@0.2.4\n\u251c\u2500\u2500 cookie@0.1.2\n\u251c\u2500\u2500 escape-html@1.0.1\n\u251c\u2500\u2500 range-parser@1.0.2\n\u251c\u2500\u2500 content-type@1.0.1\n\u251c\u2500\u2500 finalhandler@0.3.3\n\u251c\u2500\u2500 vary@1.0.0\n\u251c\u2500\u2500 parseurl@1.3.0\n\u251c\u2500\u2500 content-disposition@0.5.0\n\u251c\u2500\u2500 path-to-regexp@0.1.3\n\u251c\u2500\u2500 depd@1.0.0\n\u251c\u2500\u2500 qs@2.3.3\n\u251c\u2500\u2500 on-finished@2.2.0 (ee-first@1.1.0)\n\u251c\u2500\u2500 etag@1.5.1 (crc@3.2.1)\n\u251c\u2500\u2500 debug@2.1.3 (ms@0.7.0)\n\u251c\u2500\u2500 proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)\n\u251c\u2500\u2500 send@0.12.1 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)\n\u251c\u2500\u2500 serve-static@1.9.2 (send@0.12.2)\n\u251c\u2500\u2500 accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)\n\u2514\u2500\u2500 type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)  You can use the following command to check all the modules installed globally \u2212  $ npm ls -g", 
            "title": "Global vs Local Installation"
        }, 
        {
            "location": "/package_manager/#using-packagejson", 
            "text": "package.json is present in the root directory of any Node application/module and is used to define the properties of a package. Let's open package.json of express package present in node_modules/express/  {\n    name :  express ,\n       description :  Fast, unopinionated, minimalist web framework ,\n       version :  4.11.2 ,\n       author : {\n\n          name :  TJ Holowaychuk ,\n          email :  tj@vision-media.ca \n      },\n\n    contributors : [{\n       name :  Aaron Heckmann ,\n       email :  aaron.heckmann+github@gmail.com \n   }, \n\n   {\n       name :  Ciaran Jessup ,\n       email :  ciaranj@gmail.com \n   },\n\n   {\n       name :  Douglas Christopher Wilson ,\n       email :  doug@somethingdoug.com \n   },\n\n   {\n       name :  Guillermo Rauch ,\n       email :  rauchg@gmail.com \n   },\n\n   {\n       name :  Jonathan Ong ,\n       email :  me@jongleberry.com \n   },\n\n   {\n       name :  Roman Shtylman ,\n       email :  shtylman+expressjs@gmail.com \n   },\n\n   {\n       name :  Young Jae Sim ,\n       email :  hanul@hanul.me \n   } ],\n    license :  MIT ,  repository : {\n       type :  git ,\n       url :  https://github.com/strongloop/express \n   },\n    homepage :  https://expressjs.com/ ,  keywords : [\n       express ,\n       framework ,\n       sinatra ,\n       web ,\n       rest ,\n       restful ,\n       router ,\n       app ,\n       api \n   ],\n    dependencies : {\n       accepts :  ~1.2.3 ,\n       content-disposition :  0.5.0 ,\n       cookie-signature :  1.0.5 ,\n       debug :  ~2.1.1 ,\n       depd :  ~1.0.0 ,\n       escape-html :  1.0.1 ,\n       etag :  ~1.5.1 ,\n       finalhandler :  0.3.3 ,\n       fresh :  0.2.4 ,\n       media-typer :  0.3.0 ,\n       methods :  ~1.1.1 ,\n       on-finished :  ~2.2.0 ,\n       parseurl :  ~1.3.0 ,\n       path-to-regexp :  0.1.3 ,\n       proxy-addr :  ~1.0.6 ,\n       qs :  2.3.3 ,\n       range-parser :  ~1.0.2 ,\n       send :  0.11.1 ,\n       serve-static :  ~1.8.1 ,\n       type-is :  ~1.5.6 ,\n       vary :  ~1.0.0 ,\n       cookie :  0.1.2 ,\n       merge-descriptors :  0.0.2 ,\n       utils-merge :  1.0.0 \n   },\n    devDependencies : {\n       after :  0.8.1 ,\n       ejs :  2.1.4 ,\n       istanbul :  0.3.5 ,\n       marked :  0.3.3 ,\n       mocha :  ~2.1.0 ,\n       should :  ~4.6.2 ,\n       supertest :  ~0.15.0 ,\n       hjs :  ~0.0.6 ,\n       body-parser :  ~1.11.0 ,\n       connect-redis :  ~2.2.0 ,\n       cookie-parser :  ~1.3.3 ,\n       express-session :  ~1.10.2 ,\n       jade :  ~1.9.1 ,\n       method-override :  ~2.3.1 ,\n       morgan :  ~1.5.1 ,\n       multiparty :  ~4.1.1 ,\n       vhost :  ~3.0.0 \n   },\n    engines : {\n       node :  = 0.10.0 \n   },\n    files : [\n       LICENSE ,\n       History.md ,\n       Readme.md ,\n       index.js ,\n       lib/ \n   ],\n    scripts : {\n       test :  mocha --require test/support/env \n         --reporter spec --bail --check-leaks test/ test/acceptance/ ,\n       test-cov :  istanbul cover node_modules/mocha/bin/_mocha \n         -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/ ,\n       test-tap :  mocha --require test/support/env \n         --reporter tap --check-leaks test/ test/acceptance/ ,\n       test-travis :  istanbul cover node_modules/mocha/bin/_mocha \n         --report lcovonly -- --require test/support/env \n         --reporter spec --check-leaks test/ test/acceptance/ \n   },\n    gitHead :  63ab25579bda70b4927a179b580a9c580b6c7ada ,\n    bugs : {\n       url :  https://github.com/strongloop/express/issues \n   },\n    _id :  express@4.11.2 ,\n    _shasum :  8df3d5a9ac848585f00a0777601823faecd3b148 ,\n    _from :  express@* ,\n    _npmVersion :  1.4.28 ,\n    _npmUser : {\n       name :  dougwilson ,\n       email :  doug@somethingdoug.com \n   },\n    maintainers : [\n      {\n          name :  tjholowaychuk ,\n          email :  tj@vision-media.ca \n      },\n      {\n          name :  jongleberry ,\n          email :  jonathanrichardong@gmail.com \n      },\n      {\n          name :  shtylman ,\n          email :  shtylman@gmail.com \n      },\n      {\n          name :  dougwilson ,\n          email :  doug@somethingdoug.com \n      },\n      {\n          name :  aredridel ,\n          email :  aredridel@nbtsc.org \n      },\n      {\n          name :  strongloop ,\n          email :  callback@strongloop.com \n      },\n      {\n          name :  rfeng ,\n          email :  enjoyjava@gmail.com \n      }\n   ],\n    dist : {\n       shasum :  8df3d5a9ac848585f00a0777601823faecd3b148 ,\n       tarball :  https://registry.npmjs.org/express/-/express-4.11.2.tgz \n   },\n    directories : {},\n       _resolved :  https://registry.npmjs.org/express/-/express-4.11.2.tgz ,\n       readme :  ERROR: No README data found! \n}", 
            "title": "Using package.json"
        }, 
        {
            "location": "/package_manager/#attributes-of-packagejson", 
            "text": "name  \u2212 name of the package  version  \u2212 version of the package  description  \u2212 description of the package  homepage  \u2212 homepage of the package  author  \u2212 author of the package  contributors  \u2212 name of the contributors to the package  dependencies  \u2212 list of dependencies. NPM automatically installs all the dependencies mentioned here in the node_module folder of the package.\nrepository \u2212 repository type and URL of the package  main  \u2212 entry point of the package  keywords  \u2212 keywords", 
            "title": "Attributes of Package.json"
        }, 
        {
            "location": "/package_manager/#uninstalling-a-module", 
            "text": "Use the following command to uninstall a Node.js module.  $ npm uninstall express  Once NPM uninstalls the package, you can verify it by looking at the content of /node_modules/ directory or type the following command \u2212  $ npm ls", 
            "title": "Uninstalling a Module"
        }, 
        {
            "location": "/package_manager/#updating-a-module", 
            "text": "Update package.json and change the version of the dependency to be updated and run the following command.  $ npm update express", 
            "title": "Updating a Module"
        }, 
        {
            "location": "/package_manager/#search-a-module", 
            "text": "Search a package name using NPM.  $ npm search express", 
            "title": "Search a Module"
        }, 
        {
            "location": "/package_manager/#create-a-module", 
            "text": "Creating a module requires package.json to be generated. Let's generate package.json using NPM, which will generate the basic skeleton of the package.json.  $ npm init\n\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sane defaults.\n\nSee 'npm help json' for definitive documentation on these fields\nand exactly what they do.\n\nUse 'npm install  pkg  --save' afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (webmaster)  You will need to provide all the required information about your module. You can take help from the above-mentioned package.json file to understand the meanings of various information demanded. Once package.json is generated, use the following command to register yourself with NPM repository site using a valid email address.  $ npm adduser\nUsername: mcmohd\nPassword:\nEmail: (this IS public) mcmohd@gmail.com  It is time now to publish your module \u2212  $ npm publish  If everything is fine with your module, then it will be published in the repository and will be accessible to install using NPM like any other Node.js module.", 
            "title": "Create a Module"
        }, 
        {
            "location": "/command_line/", 
            "text": "Command Line\n\n\nPass command line arguments\n\n\nThe arguments are stored in \nprocess.argv\n\n\nHere are the node docs on handling command line args:\n\n\n\n\nprocess.argv\n is an array containing the command line arguments. The first element will be 'node', the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.\n\n\n\n\n// print process.argv\nprocess.argv.forEach(function (val, index, array) {\n  console.log(index + ': ' + val);\n});\n\n\n\n\nThis will generate:\n\n\n$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four", 
            "title": "Command Line"
        }, 
        {
            "location": "/command_line/#command-line", 
            "text": "", 
            "title": "Command Line"
        }, 
        {
            "location": "/command_line/#pass-command-line-arguments", 
            "text": "The arguments are stored in  process.argv  Here are the node docs on handling command line args:   process.argv  is an array containing the command line arguments. The first element will be 'node', the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.   // print process.argv\nprocess.argv.forEach(function (val, index, array) {\n  console.log(index + ': ' + val);\n});  This will generate:  $ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four", 
            "title": "Pass command line arguments"
        }
    ]
}